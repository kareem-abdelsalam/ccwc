// Code generated by MockGen. DO NOT EDIT.
// Source: wcImplementation/ccwcFileSystem.go
//
// Generated by this command:
//
//	mockgen --source wcImplementation/ccwcFileSystem.go --destination wcImplementation/mock_ccwcFileSystem.go --package wcImplementation
//

// Package wcImplementation is a generated GoMock package.
package wcImplementation

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOSFileSystem is a mock of OSFileSystem interface.
type MockOSFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockOSFileSystemMockRecorder
}

// MockOSFileSystemMockRecorder is the mock recorder for MockOSFileSystem.
type MockOSFileSystemMockRecorder struct {
	mock *MockOSFileSystem
}

// NewMockOSFileSystem creates a new mock instance.
func NewMockOSFileSystem(ctrl *gomock.Controller) *MockOSFileSystem {
	mock := &MockOSFileSystem{ctrl: ctrl}
	mock.recorder = &MockOSFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFileSystem) EXPECT() *MockOSFileSystemMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockOSFileSystem) Open(name string) (OSFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(OSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOSFileSystemMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOSFileSystem)(nil).Open), name)
}

// Stat mocks base method.
func (m *MockOSFileSystem) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSFileSystemMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOSFileSystem)(nil).Stat), name)
}

// MockOSFile is a mock of OSFile interface.
type MockOSFile struct {
	ctrl     *gomock.Controller
	recorder *MockOSFileMockRecorder
}

// MockOSFileMockRecorder is the mock recorder for MockOSFile.
type MockOSFileMockRecorder struct {
	mock *MockOSFile
}

// NewMockOSFile creates a new mock instance.
func NewMockOSFile(ctrl *gomock.Controller) *MockOSFile {
	mock := &MockOSFile{ctrl: ctrl}
	mock.recorder = &MockOSFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFile) EXPECT() *MockOSFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOSFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOSFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOSFile)(nil).Close))
}

// Read mocks base method.
func (m *MockOSFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockOSFileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockOSFile)(nil).Read), p)
}

// ReadAt mocks base method.
func (m *MockOSFile) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockOSFileMockRecorder) ReadAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockOSFile)(nil).ReadAt), p, off)
}

// Seek mocks base method.
func (m *MockOSFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockOSFileMockRecorder) Seek(offset, whence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockOSFile)(nil).Seek), offset, whence)
}

// Stat mocks base method.
func (m *MockOSFile) Stat() (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOSFile)(nil).Stat))
}
